// Copyright 2020 The TensorFlow Runtime Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//===- remote_message.proto -----------------------------------------------===//
//
// This file defines protocol messages for communications in distributed TFRT.
//
//===----------------------------------------------------------------------===//

syntax = "proto3";

package tfrt;

import "include/tfrt/distributed_runtime/proto/cluster_config.proto";

message DeviceInfo {
  string name = 1;
  string type = 2;
}

message GetDevicesRequest {}

message GetDevicesResponse {
  repeated DeviceInfo devices = 1;
}

message CreateContextRequest {
  // Unique ID for the DistributedContext to be created.
  // This ID will be used for all subsequent communications in this distributed
  // execution environment between client/server.
  fixed64 context_id = 1;

  // Configuration of the cluster and the role (job, task) of the target host.
  DistributedContextConfiguration dist_config = 2;

  // List of remote device information in the cluster.
  repeated DeviceInfo devices = 3;

  // Whether creating context in multi-client mode.
  bool is_multi_client = 4;
}

message CreateContextResponse {
  RemoteObjectIdProto ready_chain = 1;
}

message CloseContextRequest {
  fixed64 context_id = 1;
}

message CloseContextResponse {}

message SendReadyChainsRequest {
  fixed64 context_id = 1;
  repeated RemoteObjectIdProto ready_chains = 2;
}

message SendReadyChainsResponse {}

message KeepAliveRequest {
  fixed64 context_id = 1;
}

message KeepAliveResponse {}

message SendDataRequest {
  fixed64 context_id = 1;
  string instance_key = 2;
  repeated bytes payload = 3;
}

message SendDataResponse {}

message RegisterFunctionRequest {
  fixed64 context_id = 1;
  // The name of the program to be registered.
  string program_name = 2;
  // The body of the program to be executed
  bytes program = 3;
  bool need_compilation = 4;
}

message RegisterFunctionResponse {
  repeated string output_device = 1;
}

message RemoteObjectIdProto {
  uint64 prefix_id = 1;
  uint64 local_id = 2;
  string device = 3;
}

message RemoteExecuteOutput {
  RemoteObjectIdProto id = 1;
  bool need_metadata = 2;
}

message RemoteExecuteRequest {
  fixed64 context_id = 1;
  // The name of the program to be executed
  string program_name = 2;

  // List of inputs and outputs
  repeated RemoteObjectIdProto input = 3;
  repeated RemoteExecuteOutput output = 4;
}

message RemoteExecuteResponse {
  repeated bytes metadata = 1;
}

// EXPERIMENTAL
message RemoteOpIntAttribute {
  string name = 1;
  repeated int64 value = 2;
  bool is_array = 3;
}

message RemoteExecuteOpRequest {
  fixed64 context_id = 1;
  string op_handler_name = 2;
  string op_name = 3;

  // Input and output chain on the remote side.
  RemoteObjectIdProto in_chain = 4;
  RemoteObjectIdProto out_chain = 5;

  // Data inputs and outputs.
  repeated RemoteObjectIdProto input = 6;
  repeated RemoteExecuteOutput output = 7;

  // Op attributes.  EXPERIMENTAL.
  repeated RemoteOpIntAttribute attributes = 8;
}

message RemoteExecuteOpResponse {
  repeated bytes metadata = 1;
}

message DeleteRemoteObjectsRequest {
  fixed64 context_id = 1;

  // List of inputs
  repeated RemoteObjectIdProto input = 2;

  // TODO(bramandia): Add chain input
}

message DeleteRemoteObjectsResponse {}
